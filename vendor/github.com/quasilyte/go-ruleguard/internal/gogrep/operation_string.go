// Code generated by "stringer -type=operation -trimprefix=op"; DO NOT EDIT.

package gogrep

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opInvalid-0]
	_ = x[opNode-1]
	_ = x[opNamedNode-2]
	_ = x[opNodeSeq-3]
	_ = x[opNamedNodeSeq-4]
	_ = x[opOptNode-5]
	_ = x[opNamedOptNode-6]
	_ = x[opMultiStmt-7]
	_ = x[opMultiExpr-8]
	_ = x[opEnd-9]
	_ = x[opBasicLit-10]
	_ = x[opStrictIntLit-11]
	_ = x[opStrictFloatLit-12]
	_ = x[opStrictCharLit-13]
	_ = x[opStrictStringLit-14]
	_ = x[opStrictComplexLit-15]
	_ = x[opIdent-16]
	_ = x[opIndexExpr-17]
	_ = x[opSliceExpr-18]
	_ = x[opSliceFromExpr-19]
	_ = x[opSliceToExpr-20]
	_ = x[opSliceFromToExpr-21]
	_ = x[opSliceToCapExpr-22]
	_ = x[opSliceFromToCapExpr-23]
	_ = x[opFuncLit-24]
	_ = x[opCompositeLit-25]
	_ = x[opTypedCompositeLit-26]
	_ = x[opSimpleSelectorExpr-27]
	_ = x[opSelectorExpr-28]
	_ = x[opTypeAssertExpr-29]
	_ = x[opTypeSwitchAssertExpr-30]
	_ = x[opVoidFuncType-31]
	_ = x[opFuncType-32]
	_ = x[opArrayType-33]
	_ = x[opSliceType-34]
	_ = x[opMapType-35]
	_ = x[opChanType-36]
	_ = x[opKeyValueExpr-37]
	_ = x[opEllipsis-38]
	_ = x[opTypedEllipsis-39]
	_ = x[opStarExpr-40]
	_ = x[opUnaryExpr-41]
	_ = x[opBinaryExpr-42]
	_ = x[opParenExpr-43]
	_ = x[opVariadicCallExpr-44]
	_ = x[opCallExpr-45]
	_ = x[opAssignStmt-46]
	_ = x[opMultiAssignStmt-47]
	_ = x[opBranchStmt-48]
	_ = x[opSimpleLabeledBranchStmt-49]
	_ = x[opLabeledBranchStmt-50]
	_ = x[opSimpleLabeledStmt-51]
	_ = x[opLabeledStmt-52]
	_ = x[opBlockStmt-53]
	_ = x[opExprStmt-54]
	_ = x[opGoStmt-55]
	_ = x[opDeferStmt-56]
	_ = x[opSendStmt-57]
	_ = x[opEmptyStmt-58]
	_ = x[opIncDecStmt-59]
	_ = x[opReturnStmt-60]
	_ = x[opIfStmt-61]
	_ = x[opIfInitStmt-62]
	_ = x[opIfElseStmt-63]
	_ = x[opIfInitElseStmt-64]
	_ = x[opIfNamedOptStmt-65]
	_ = x[opIfNamedOptElseStmt-66]
	_ = x[opSwitchStmt-67]
	_ = x[opSwitchTagStmt-68]
	_ = x[opSwitchInitStmt-69]
	_ = x[opSwitchInitTagStmt-70]
	_ = x[opSelectStmt-71]
	_ = x[opTypeSwitchStmt-72]
	_ = x[opTypeSwitchInitStmt-73]
	_ = x[opCaseClause-74]
	_ = x[opDefaultCaseClause-75]
	_ = x[opCommClause-76]
	_ = x[opDefaultCommClause-77]
	_ = x[opForStmt-78]
	_ = x[opForPostStmt-79]
	_ = x[opForCondStmt-80]
	_ = x[opForCondPostStmt-81]
	_ = x[opForInitStmt-82]
	_ = x[opForInitPostStmt-83]
	_ = x[opForInitCondStmt-84]
	_ = x[opForInitCondPostStmt-85]
	_ = x[opRangeStmt-86]
	_ = x[opRangeKeyStmt-87]
	_ = x[opRangeKeyValueStmt-88]
	_ = x[opFieldList-89]
	_ = x[opUnnamedField-90]
	_ = x[opSimpleField-91]
	_ = x[opField-92]
	_ = x[opMultiField-93]
	_ = x[opValueInitSpec-94]
	_ = x[opTypedValueInitSpec-95]
	_ = x[opTypedValueSpec-96]
	_ = x[opTypeSpec-97]
	_ = x[opTypeAliasSpec-98]
	_ = x[opFuncDecl-99]
	_ = x[opMethodDecl-100]
	_ = x[opFuncProtoDecl-101]
	_ = x[opMethodProtoDecl-102]
	_ = x[opConstDecl-103]
	_ = x[opVarDecl-104]
	_ = x[opTypeDecl-105]
	_ = x[opEmptyPackage-106]
}

const _operation_name = "InvalidNodeNamedNodeNodeSeqNamedNodeSeqOptNodeNamedOptNodeMultiStmtMultiExprEndBasicLitStrictIntLitStrictFloatLitStrictCharLitStrictStringLitStrictComplexLitIdentIndexExprSliceExprSliceFromExprSliceToExprSliceFromToExprSliceToCapExprSliceFromToCapExprFuncLitCompositeLitTypedCompositeLitSimpleSelectorExprSelectorExprTypeAssertExprTypeSwitchAssertExprVoidFuncTypeFuncTypeArrayTypeSliceTypeMapTypeChanTypeKeyValueExprEllipsisTypedEllipsisStarExprUnaryExprBinaryExprParenExprVariadicCallExprCallExprAssignStmtMultiAssignStmtBranchStmtSimpleLabeledBranchStmtLabeledBranchStmtSimpleLabeledStmtLabeledStmtBlockStmtExprStmtGoStmtDeferStmtSendStmtEmptyStmtIncDecStmtReturnStmtIfStmtIfInitStmtIfElseStmtIfInitElseStmtIfNamedOptStmtIfNamedOptElseStmtSwitchStmtSwitchTagStmtSwitchInitStmtSwitchInitTagStmtSelectStmtTypeSwitchStmtTypeSwitchInitStmtCaseClauseDefaultCaseClauseCommClauseDefaultCommClauseForStmtForPostStmtForCondStmtForCondPostStmtForInitStmtForInitPostStmtForInitCondStmtForInitCondPostStmtRangeStmtRangeKeyStmtRangeKeyValueStmtFieldListUnnamedFieldSimpleFieldFieldMultiFieldValueInitSpecTypedValueInitSpecTypedValueSpecTypeSpecTypeAliasSpecFuncDeclMethodDeclFuncProtoDeclMethodProtoDeclConstDeclVarDeclTypeDeclEmptyPackage"

var _operation_index = [...]uint16{0, 7, 11, 20, 27, 39, 46, 58, 67, 76, 79, 87, 99, 113, 126, 141, 157, 162, 171, 180, 193, 204, 219, 233, 251, 258, 270, 287, 305, 317, 331, 351, 363, 371, 380, 389, 396, 404, 416, 424, 437, 445, 454, 464, 473, 489, 497, 507, 522, 532, 555, 572, 589, 600, 609, 617, 623, 632, 640, 649, 659, 669, 675, 685, 695, 709, 723, 741, 751, 764, 778, 795, 805, 819, 837, 847, 864, 874, 891, 898, 909, 920, 935, 946, 961, 976, 995, 1004, 1016, 1033, 1042, 1054, 1065, 1070, 1080, 1093, 1111, 1125, 1133, 1146, 1154, 1164, 1177, 1192, 1201, 1208, 1216, 1228}

func (i operation) String() string {
	if i >= operation(len(_operation_index)-1) {
		return "operation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _operation_name[_operation_index[i]:_operation_index[i+1]]
}
